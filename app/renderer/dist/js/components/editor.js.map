{"version":3,"sources":["editor.jsx"],"names":["Editor","props","state","title","content","haveChanges","event","setState","target","value","newContent","nextProps","nextState","document","querySelector","innerHTML","self","codeMirrorConfig","lineWrapping","updateTitle","bind","updateContent","module","exports"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,M;;;AACF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA,oHACTA,KADS;;AAGf,cAAKC,KAAL,GAAa;AACTC,mBAAO,MAAKF,KAAL,CAAWE,KADT;AAETC,qBAAS,MAAKH,KAAL,CAAWG,OAFX;AAGTC,yBAAa;AAHJ,SAAb;AAHe;AAQlB;;;;oCAEWC,K,EAAO;AACf,iBAAKC,QAAL,CAAc;AACVJ,uBAAOG,MAAME,MAAN,CAAaC,KADV;AAEVJ,6BAAaC,MAAME,MAAN,CAAaC,KAAb,KAAuB,KAAKP,KAAL,CAAWC;AAFrC,aAAd;AAIH;;;sCAEaO,U,EAAY;AACtB,iBAAKH,QAAL,CAAc;AACVH,yBAASM,UADC;AAEVL,6BAAaK,eAAe,KAAKR,KAAL,CAAWE;AAF7B,aAAd;AAIH;;;mCAEUD,K,EAAOC,O,EAAS;AACvB,iBAAKG,QAAL,CAAc;AACVJ,uBAAOA,KADG;AAEVC,yBAASA,OAFC;AAGVC,6BAAa;AAHH,aAAd;AAKH;;;4CAEmBM,S,EAAWC,S,EAAW;AACtC,gBAAGA,UAAUP,WAAb,EAA0B;AACtBQ,yBAASC,aAAT,CAAuB,OAAvB,EAAgCC,SAAhC,GAA4C,mBAA5C;AACH,aAFD,MAEO;AACHF,yBAASC,aAAT,CAAuB,OAAvB,EAAgCC,SAAhC,GAA4C,UAA5C;AACH;AACJ;;;iCAEQ;AACL,gBAAIC,OAAO,IAAX;AACA,gBAAIC,mBAAmB;AACnBC,8BAAc;AADK,aAAvB;;AAIA,mBACI;AAAA;AAAA,kBAAK,WAAU,QAAf;AACI;AACI,0BAAK,MADT;AAEI,2BAAO,KAAKhB,KAAL,CAAWC,KAFtB;AAGI,8BAAU,KAAKgB,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAHd,GADJ;AAMI;AACI,2BAAO,KAAKlB,KAAL,CAAWE,OADtB;AAEI,6BAASa,gBAFb;AAGI,8BAAU,KAAKI,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAHd;AANJ,aADJ;AAaH;;;;;;AAGLE,OAAOC,OAAP,GAAiBvB,MAAjB","file":"editor.js","sourcesContent":["import React from 'react';\nimport ReactMarkdown from 'react-md-editor';\nimport EventEmitter from './../eventEmitter.js';\n\nclass Editor extends EventEmitter {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: this.props.title,\n            content: this.props.content,\n            haveChanges: false\n        };\n    }\n\n    updateTitle(event) {\n        this.setState({\n            title: event.target.value,\n            haveChanges: event.target.value !== this.state.title\n        });\n    }\n\n    updateContent(newContent) {\n        this.setState({\n            content: newContent,\n            haveChanges: newContent !== this.state.content\n        });\n    }\n\n    setContent(title, content) {\n        this.setState({\n            title: title,\n            content: content,\n            haveChanges: false\n        });\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        if(nextState.haveChanges) {\n            document.querySelector('title').innerHTML = \"WP Notes - edycja\";\n        } else {\n            document.querySelector('title').innerHTML = \"WP Notes\";\n        }\n    }\n\n    render() {\n        let self = this;\n        let codeMirrorConfig = {\n            lineWrapping: true\n        }\n\n        return (\n            <div className=\"editor\">\n                <input\n                    type=\"text\"\n                    value={this.state.title}\n                    onChange={this.updateTitle.bind(this)} />\n\n                <ReactMarkdown\n                    value={this.state.content}\n                    options={codeMirrorConfig}\n                    onChange={this.updateContent.bind(this)} />\n            </div>\n        );\n    }\n}\n\nmodule.exports = Editor;\n"]}