{"version":3,"sources":["app.jsx"],"names":["App","props","state","list","token","localStorage","getItem","username","userID","getLocalPosts","on","event","saveChanges","subscribe","removePost","bind","getPost","addPost","setUserData","send","once","response","detectedErrors","setState","id","title","item","user_id","user_display_name","sidebar","activeItem","editor","haveChanges","dispatch","setContent","loadPostTitle","updatedList","filter","onWindowClose","onNewPost","alert","postID","modifiedPost","content","addNewPost","editPost","addedPost","author","data","message","modificationDate","modified_gmt","slice","push","sort","a","b","updatedPost","map","clear","status","logout","Array","isArray","node","login","unsubscribe","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["import React from 'react';\nimport EventEmitter from './../eventEmitter.js';\nimport Sidebar from './sidebar.js';\nimport Editor from './editor.js';\nimport Login from './login.js';\nimport {ipcRenderer} from 'electron';\n\nclass App extends EventEmitter {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            list: [],\n            token: localStorage.getItem('jwt-token'),\n            username: localStorage.getItem('jwt-username'),\n            userID: localStorage.getItem('jwt-id')\n        };\n\n        if(localStorage.getItem('jwt-id')) {\n            this.getLocalPosts(localStorage.getItem('jwt-id'));\n        }\n\n        ipcRenderer.on('saveCurrentPost', (event) => {\n            this.saveChanges(true);\n        });\n\n        this.subscribe('item-remove', this.removePost.bind(this));\n        this.subscribe('item-show', this.getPost.bind(this));\n        this.subscribe('item-add', this.addPost.bind(this));\n        this.subscribe('user-logged-in', this.setUserData.bind(this));\n    }\n\n    getLocalPosts(userID, token = false) {\n        ipcRenderer.send('loadRemotePosts', {\n            token: token || this.state.token,\n            userID: userID\n        });\n\n        ipcRenderer.once('loadRemotePostsResponse', (event, response) => {\n            if(response !== true) {\n                this.detectedErrors(response);\n                return;\n            }\n\n            ipcRenderer.send('loadLocalPosts', {\n                userID: userID\n            });\n\n            ipcRenderer.once('loadLocalPostsResponse', (event, response) => {\n                if(this.detectedErrors(response)) {\n                    return;\n                }\n\n                this.setState({\n                    list: response\n                });\n            });\n        });\n    }\n\n    loadPostTitle(id) {\n        let title = '';\n\n        for(let item of this.state.list) {\n            if(item.id === id) {\n                return item.title;\n            }\n        }\n\n        return title;\n    }\n\n    setUserData(response) {\n        this.getLocalPosts(response.user_id, response.token);\n\n        this.setState({\n            token: response.token,\n            username: response.user_display_name,\n            userID: response.user_id\n        });\n    }\n\n    getPost(id) {\n        if(this.sidebar.state.activeItem && this.editor.state.haveChanges) {\n            this.saveChanges(false);\n        }\n\n        ipcRenderer.send('loadLocalPost', {\n            userID: this.state.userID,\n            id: id\n        });\n\n        ipcRenderer.once('loadLocalPostResponse', (event, response) => {\n            this.dispatch('active-item-change', id);\n            this.editor.setContent(this.loadPostTitle(id), response);\n        });\n    }\n\n    addPost() {\n        if(this.sidebar.state.activeItem !== false && this.editor.state.haveChanges) {\n            this.saveChanges(false, true);\n            return;\n        }\n\n        this.dispatch('active-item-change', false);\n        this.editor.setContent('', '');\n    }\n\n    removePost(id) {\n        ipcRenderer.send('removeRemotePost', {\n            token: this.state.token,\n            id: id\n        });\n\n        ipcRenderer.once('removeRemotePostResponse', (event, response) => {\n            ipcRenderer.send('removeLocalPost', {\n                userID: this.state.userID,\n                id: id\n            });\n\n            ipcRenderer.once('removeLocalPostResponse', (event, response) => {\n                if(this.detectedErrors(response)) {\n                    return;\n                }\n\n                let updatedList = this.state.list.filter(item => item.id !== id);\n\n                this.setState({\n                    list: updatedList\n                });\n\n                this.dispatch('active-item-change', false);\n                this.editor.setContent('', '');\n            });\n        });\n    }\n\n    saveChanges(onWindowClose = false, onNewPost = false) {\n        if(this.editor.state.title === '') {\n            alert('Tytuł wpisu nie może być pusty');\n            return;\n        }\n\n        let postID = this.sidebar.state.activeItem;\n        let modifiedPost = {\n            title: this.editor.state.title,\n            content: this.editor.state.content\n        };\n\n        if(postID === false) {\n            this.addNewPost(modifiedPost, onWindowClose, onNewPost);\n        } else {\n            modifiedPost.id = postID;\n            this.editPost(modifiedPost, onWindowClose, onNewPost);\n        }\n    }\n\n    addNewPost(addedPost, onWindowClose, onNewPost) {\n        ipcRenderer.send('addRemotePost', {\n            token: this.state.token,\n            author: this.state.userID,\n            data: addedPost\n        });\n\n        ipcRenderer.once('addRemotePostResponse', (event, response) => {\n            if(!response.id) {\n                alert(response.message);\n                return;\n            }\n\n            addedPost.id = response.id;\n            addedPost.modificationDate = response.modified_gmt;\n\n            ipcRenderer.send('addLocalPost', {\n                userID: this.state.userID,\n                id: response.id,\n                data: addedPost\n            });\n\n            ipcRenderer.once('addLocalPostResponse', (event, response) => {\n                if(onWindowClose) {\n                    ipcRenderer.send('canCloseWindow', true);\n                    return;\n                }\n\n                if(this.detectedErrors(response)) {\n                    return;\n                }\n\n                let updatedList = this.state.list.slice();\n                updatedList.push(addedPost);\n                updatedList.sort((a, b) => {\n                    return b.modificationDate - a.modificationDate;\n                });\n\n                this.setState({ list: updatedList });\n                this.sidebar.setState({ activeItem: addedPost.id });\n\n                if(onNewPost) {\n                    this.dispatch('active-item-change', false);\n                    this.editor.setContent('', '');\n                    return;\n                }\n\n                this.editor.setContent(addedPost.title, addedPost.content);\n            });\n        });\n    }\n\n    editPost(updatedPost, onWindowClose, onNewPost) {\n        ipcRenderer.send('editRemotePost', {\n            token: this.state.token,\n            id: updatedPost.id,\n            data: updatedPost\n        });\n\n        ipcRenderer.once('editRemotePostResponse', (event, response) => {\n            updatedPost.modificationDate = response.modified_gmt;\n\n            ipcRenderer.send('editLocalPost', {\n                userID: this.state.userID,\n                id: updatedPost.id,\n                data: updatedPost\n            });\n\n            ipcRenderer.once('editLocalPostResponse', (event, response) => {\n                if(onWindowClose) {\n                    ipcRenderer.send('canCloseWindow', true);\n                    return;\n                }\n\n                if(this.detectedErrors(response)) {\n                    return;\n                }\n\n                let updatedList = this.state.list.map(item => {\n                    if(item.id === updatedPost.id) {\n                        item.title = updatedPost.title;\n                        item.modificationDate = updatedPost.modificationDate;\n                    }\n\n                    return item;\n                });\n\n                updatedList.sort((a, b) => {\n                    return b.modificationDate - a.modificationDate;\n                });\n\n                this.setState({\n                    list: updatedList\n                });\n\n                if(onNewPost) {\n                    this.dispatch('active-item-change', false);\n                    this.editor.setContent('', '');\n                    return;\n                }\n\n                this.editor.setContent(updatedPost.title, updatedPost.content);\n            });\n        });\n    }\n\n    logout() {\n        localStorage.clear();\n\n        this.setState({\n            list: [],\n            token: null,\n            username: null,\n            userID: null\n        });\n\n        this.editor.setContent('', '');\n    }\n\n    detectedErrors(response) {\n        if(response.data && response.data.status === 403) {\n            this.logout();\n            return true;\n        }\n\n        if(!Array.isArray(response) && response.message) {\n            alert(response.message);\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Sidebar\n                    ref={node => this.sidebar = node}\n                    list={this.state.list} />\n\n                <Editor\n                    ref={node => this.editor = node}\n                    title=\"\"\n                    content=\"\" />\n\n                <Login\n                    ref={node => this.login = node}\n                    visible={!this.state.token} />\n            </div>\n        );\n    }\n\n    componentWillUnmount() {\n        this.unsubscribe('item-remove', this.removePost);\n        this.unsubscribe('item-show', this.getPost);\n        this.unsubscribe('item-add', this.addPost);\n        this.unsubscribe('user-logged-in', this.setUserData);\n    }\n}\n\nmodule.exports = App;\n"]}